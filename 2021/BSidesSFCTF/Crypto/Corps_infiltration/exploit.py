#!/usr/bin/env python3

from pwn import *
from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long, long_to_bytes
import gmpy2

gmpy2.get_context().precision = 4096
r = remote('phicorps-26aed53a.challenges.bsidessf.net', 25519)

r.recvuntil('Welcome Agent 65537!')
print(r.recvuntil('Retrieving key').decode('utf-8'))
r.recvuntil('Ï•-Corps public modulus:')
n = int(r.recvuntil('\n'))
r.recvuntil('Your public encryption exponent:')
e = int(r.recvuntil('\n'))
r.recvuntil('Your private decryption exponent:')
d = int(r.recvuntil('\n'))
r.recvuntil('Agent 7\'s public encryption exponent is')
agent_e = int(r.recvuntil('\n'))
r.recvuntil('The message we intercepted to Agent 7 was')
cipher = int(r.recvuntil('\n'))

log.info(f'n = {n}')
log.info(f'e = {e}')
log.info(f'd = {d}')
log.info(f'agent_e = {agent_e}')
log.info(f'cipher = {cipher}')

test_pt = b'helloWorld'
test_ct = pow(bytes_to_long(test_pt), e, n)
test_dec = long_to_bytes(pow(test_ct, d, n)).decode('utf-8')
log.info(f'test: encrypted {test_pt.decode("utf-8")} - decrypted {test_dec}')

# recover p and q knowing n and d
priv_key = RSA.construct((n, e, d))
q = priv_key.q
p = priv_key.p
log.success(f'q = {q}')
log.success(f'p = {p}')

# compute agent_d
phi = (p - 1) * (q - 1)
agent_d = gmpy2.invert(agent_e, phi)
log.success(f'agent_d = {agent_d}')

# decrypt ciphertext
pt = pow(cipher, agent_d, n)
log.success(f'pt = {pt}')
log.success(f'str pt = {long_to_bytes(pt)}')

print(r.clean().decode('utf-8'))
r.interactive()

# CTF{omg_rsa_destroyyyyyeeeeddddd}
