#!/usr/bin/env python3

from hashlib import sha256
from pwn import *
from itertools import permutations, takewhile
from functools import cmp_to_key
import time

def solvepow(p, n):
    s = p.recvline()
    starting = s.split(b'with ')[1][:10].decode()
    s1 = s.split(b'in ')[-1][:n]
    i = 0
    print("Solving PoW...")
    while True:
        if sha256((starting+str(i)).encode('ascii')).hexdigest()[-n:] == s1.decode():
            print("Solved!")
            p.sendline(starting + str(i))
            break
        i += 1

def resolve(line):
    res = 0
    mini = res
    for l in line:
        if l == 'L':
            res -= 1
        if l == 'R':
            res += 1
        if res < mini:
            mini = res
    return mini

def compare(L, G):
    return sum(1 for _ in takewhile(lambda x: x == 'L', b''.join(L).decode())) - \
            sum(1 for _ in takewhile(lambda x: x == 'L', b''.join(G).decode()))

r = remote('challs.m0lecon.it', 5886)
solvepow(r, n = 5)

en = r.recv(timeout=0.2).decode()
r.sendline('ok')

time.sleep(0.1)
lines = r.recv(timeout=0.2).splitlines()
n = lines[0]
lines = lines[1:]

sted = lines
print(sted)
k = cmp_to_key(compare)
sted.sort(key=k)
print(sted)

line = b''.join(sted)
res = resolve(line.decode())
ret = abs(res)
r.sendline(str(ret))

r.interactive()
