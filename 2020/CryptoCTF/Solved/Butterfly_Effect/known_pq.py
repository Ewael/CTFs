#!/usr/bin/env python3

import gmpy2
import binascii
import math

def getModInverse(a, m):
    if math.gcd(a, m) != 1:
        return None
    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m

    while v3 != 0:
        q = u3 // v3
        v1, v2, v3, u1, u2, u3 = (
            u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3
    return u1 % m

def main():

    e = 65537
    q = 15683037039264494815584571617344627257798109961640281075338378708987215586322143832696221447782497471485854538538145168833712835190832844667726842444901521
    p = 13076124914005645258621080861911957318200162710516358598275877085358258304460144752135806297047337974581900118461272860715903002531861455400280254478576451
    ct = 200223285109652020165546770365814034187841527478683546166727009282455088390942896977349997209468575783850390427387059172789143734529286290476716622660404272472872333720431213356961748869487809614326536783488878762743882468995004292785418471373100709375827529858596608268324440927577879001009696668085935161223

    # compute n
    n = p * q

    # Compute phi(n)
    phi = (p - 1) * (q - 1)

    # Compute modular inverse of e
    d = getModInverse(e, phi)

    print("d: " + str(d))

    # Decrypt ciphertext
    pt = pow(ct, d, n)
    print("pt: " + str(pt))
    print(binascii.unhexlify(hex(pt)[2:]))

if __name__ == "__main__":
    main()
