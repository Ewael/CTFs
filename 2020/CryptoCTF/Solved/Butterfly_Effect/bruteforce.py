#!/usr/bin/env python3

import gmpy2
from Crypto.Util.number import *

def hq_prng(x, p, g):
    rng = 0
    for _ in range(getRandomNBitInteger(14)):
        x = pow(g, x, p)
    for i in range(nbit):
        x = pow(g, x, p)
        if x < (p-1) // 2:
            rng += 2**i - 1
        elif x > (p-1) // 2:
            rng -= 2**i + 1
        else:
            rng ^= 2**(i + 1)
    if rng <= 0:
        return -rng
    return rng

def keygen(p, g):
    r, s = hq_prng(getRandomNBitInteger(nbit), p, g), hq_prng(getRandomNBitInteger(nbit), p, g)
    print(r, s)
    u, v = gmpy2.next_prime(r**2 + s**2), gmpy2.next_prime(2*r*s)
    print(u, v)
    e, n = 0x10001, u * v
    return e, n

def encrypt(msg, e, n):
    return pow(bytes_to_long(msg.encode('utf-8')), e, n)

#encrypt(flag, e, n) = 200223285109652020165546770365814034187841527478683546166727009282455088390942896977349997209468575783850390427387059172789143734529286290476716622660404272472872333720431213356961748869487809614326536783488878762743882468995004292785418471373100709375827529858596608268324440927577879001009696668085935161223

nbit = 256
n = 205073351356399791693739890764794535983691524693269769394542196092925368888366795312903565276934773683606767757205385657296690844060611829315101451796226349265293062066279694383626480690648796026226935415463748046777800922051695977900625636695006015375304461665193915553075797484058922551203325583466964681971
e = 65537
p = 61483164831860035611846458714537337654584085300116025823041281871467564805491
g = 45618612503613692059726072494986148855689165381102680970120801089756210634857

nt = 0
while nt != n:
    et, nt = keygen(p, g)
    nt = int(nt)
    print(nt)
    print('-')

print("[+] Bf over")
