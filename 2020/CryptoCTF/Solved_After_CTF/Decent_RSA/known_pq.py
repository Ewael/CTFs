#!/usr/bin/env python3

import gmpy2
import binascii
import math

# to be used when n factors have been found

e = 65537
q = 178879666367321797306889097888593237682016817784428274816313280688426535150744336100663738258433399579931125463230993781941673394549068668770856405985346219071828327791826313541995835825389300114134241321223681884355027322999626363153646031059388028375162129135057969840272058758742209553531971251667497682599
p = 178745372323502486648250292259547731882497740383375470271211389647426545774563379174721012328179536228902849348335785753064892185470437557630965689434906006707353711580986987058256416961588222214934672164128275598047618962235958689419772153936553146483744909335380089416800887458777762511622721462283374422847
ct = 3777452266770558495034058736413652558044052017617838451744499041160615281862408992105943887699528380932333072184426836867112741997603657596436471460572951875773381767840181150869797366976312938707737105025713696799446025780855118691835121585764942732200731046765514325462445160362712121742164438261480428460859373227536125055880844219311332331585941050464485916343879307257641394190251847962113762905282501077695771855707755727646741196712705251865530047096475318989645782570490137879281560552489287037848245481851187017946244251629677451771510728472458431292546451921977358259671117545699958433533413851888152083311

def getModInverse(a, m):
    if math.gcd(a, m) != 1:
        return None
    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m
    while v3 != 0:
        q = u3 // v3
        v1, v2, v3 = (u1 - q * v1), (u2 - q * v2), (u3 - q * v3)
        u1, u2, u3 = v1, v2, v3
    return u1 % m

# compute n
n = p * q

# compute phi(n)
phi = (p - 1) * (q - 1)

# compute modular inverse of e
d = getModInverse(e, phi)
print("[+] Priv key d = " + str(d))

# decrypt ciphertext
pt = pow(ct, d, n)
print("[+] pt = " + str(pt))
print("[+] Printable = {}".format(binascii.unhexlify(hex(pt)[2:])))
