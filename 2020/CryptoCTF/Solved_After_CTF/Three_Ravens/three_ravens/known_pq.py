#!/usr/bin/env python3

import gmpy2
import binascii
import math

def getModInverse(a, m):
    if math.gcd(a, m) != 1:
        return None
    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m

    while v3 != 0:
        q = u3 // v3
        v1, v2, v3, u1, u2, u3 = (
            u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3
    return u1 % m

def main():

    e = 65537
    q = 901421769496967620441648892805083406701244384898329248091739006946824546251878542624220578800715569572630526697068394940518335297545586427209356555701682900288610005005379278851800800294869380756041314170502905492461496545728606844049903198663924167707158905456680724716531324400037351280178520791397246160529955077824124053738327897682041407680562075160720829888512448917200699565757874168134944463194891175303097611646043414584418060694375193004965466981816991
    p = 29307179772448846231172430003045441132512236205616349181714384068679948629367388118438882511100161634617541090992301789403885171478507095951459705458018809
    ct = 8854006102008697200235916950124193972470402151938621042090536705975815930439516630309280863192007708791261525490170925923225702259205224271202884904719411836822127420466940370764733151475163862689561048230050739576207407324830412301427252444831550118017985983129802968721836499863963382670116649665270357195734573949816893267433762550655603431417826594007896955556375336229178945855709601133177014404200597689574142341561154342666467936551404821071372659623067160776960584953573732200972277895535226246393551644128132936718904603471909655616377012232134044096439668338630796152132334545668380069040031118239568569209

    # compute n
    n = p * q

    # Compute phi(n)
    phi = (p - 1) * (q - 1)

    # Compute modular inverse of e
    d = getModInverse(e, phi)

    print("d: " + str(d))

    # Decrypt ciphertext
    pt = pow(ct, d, n)
    print("pt: " + str(pt))
    print(binascii.unhexlify(hex(pt)[2:]))

if __name__ == "__main__":
    main()
