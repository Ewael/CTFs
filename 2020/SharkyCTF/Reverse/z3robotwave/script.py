#!/usr/bin/env python3

from z3 import *

l = 24

out = [BitVec("{}".format(i), 8) for i in range(l)]
s = Solver()

s.add(out[0x14] ^ 0x2b == out[7])
s.add(out[0x15] - out[3] == -0x14)
s.add(out[2] >> 6 == 0)
s.add(out[0xd] == 0x74)
s.add(out[0xb] & 0x3fffffff == 0x5f)
#s.add(out[7] >> ((out[0x11] + ((out[0x11] >> 7) >> 5) & 7) - ((out[0x11] >> 7) >> 5) & 0x1f) == 5)
s.add(out[6] ^ 0x53 == out[0xe])
s.add(out[8] == 0x7a)
#s.add(out[5] << ((out[9] + ((out[9] >> 7) >> 5) & 7) - ((out[9] >> 7) >> 5) & 0x1f) == 0x188)
s.add(out[0x10] - out[7] == 0x14)
#s.add(out[7] << ((out[0x17] + ((out[0x17] >> 7) >> 5) & 7) - ((out[0x17] >> 7) >> 5) & 0x1f) == 0xbe)
s.add(out[2] - out[7] == -0x2b)
s.add(out[0x15] == 0x5f)
s.add(out[2] ^ 0x47 == out[3])
s.add(out[0] == 99)
s.add(out[0xd] == 0x74)
s.add(out[0x14] & 0x45 == 0x44)
s.add(out[8] & 0x15 == 0x10)
s.add(out[0xc] == 0x5f)
s.add(out[4] >> 4 == ord('\a'))
s.add(out[0xd] == 0x74)
#s.add(out[0] >> ((out[0] + ((out[0] >> 7) >> 5) & 7) - ((out[0] >> 7) >> 5) & 0x1f) == 0xc)
s.add(out[10] == 0x5f)
s.add(out[8] & 0xac == 0x28)
s.add(out[0x10] == 0x73)
s.add(out[0x16] & 0x1d == 0x18)
s.add(out[9] == 0x33)
s.add(out[5] == 0x31)
s.add(out[0x13] & 0x3fffffff == 0x72)
s.add(out[0x14] >> 6 == ord('\x01'))
s.add(out[7] >> 1 == ord('/'))
s.add(out[1] == 0x6c)
s.add(out[3] >> 4 == ord('\a'))
s.add(out[0x13] & 0x49 == 0x40)
s.add(out[4] == 0x73)
s.add(out[0xb] & out[2] == 0x14)
s.add(out[0] == 99)
s.add(out[5] + out[4] == 0xa4)
s.add(out[0xf] & 0x3ffffff == 0x5f)
s.add(out[10] ^ 0x2b == out[0x11])
s.add(out[0xc] ^ 0x2c == out[4])
s.add(out[0x13] - out[0x15] == 0x13)
s.add(out[0xc] == 0x5f)
s.add(out[0xf] >> 1 == ord('/'))
s.add(out[0x13] == 0x72)
s.add(out[0x12] + out[0x11] == 0xa8)
s.add(out[0x16] == 0x3a)
s.add(out[0x15] & out[0x17] == 9)
#s.add(out[6] << ((out[0x13] + ((out[13] >> 7) >> 5) & 7) - ((out[13] >> 7) >> 5) & 0x1f) == 0x18c)
s.add(out[7] + out[3] == 0xd2)
s.add(out[0x16] & 0xed == 0x28)
s.add(out[0xc] & 0xac == 0xc)
s.add(out[0x12] ^ 0x6b == out[0xf])
s.add(out[0x10] & 0x7a == 0x72)
s.add(out[0] & 0x39 == 0x21)
s.add(out[6] ^ 0x3c == out[0x15])
s.add(out[0x14] == 0x74)
s.add(out[0x13] == 0x72)
s.add(out[0xc] == 0x5f)
s.add(out[2] == 0x34)
s.add(out[0x17] == 0x29)
s.add(out[10] == 0x5f)
s.add(out[9] & out[0x16] == 0x32)
s.add(out[2] + out[3] == 0xa7)
s.add(out[0x11] - out[0xe] == 0x44)
s.add(out[0x15] == 0x5f)
s.add(out[0x13] ^ 0x2d == out[10])
s.add(out[0xc] & 0x3fffffff == 0x5f)
s.add(out[0x16] & out[0xc] == 0x1a)
#s.add(out[7] << ((out[13] + ((out[0x13] >> 7) >> 5) & 7) - ((out[0x13] >> 7) >> 5) & 0x1f) == 0x17c)
s.add(out[0x14] ^ 0x4e == out[0x16])
s.add(out[6] == 99)
s.add(out[0xc] == out[7])
s.add(out[0x13] - out[0xd] == -2)
s.add(out[0xe] >> 4 == ord('\x03'))
s.add(out[0xc] & 0x38 == 0x18)
#s.add(out[8] << ((out[10] + ((out[10] >> 7) >> 5) & 7) - ((out[10] >> 7) >> 5) & 0x1f) == 0x3d00)
s.add(out[0x14] == 0x74)
#s.add(out[6] >> ((out[0x16] + ((out[0x16] >> 7) >> 5) & 7) - ((out[0x16] >> 7) >> 5) & 0x1f) == 0x18)
s.add(out[0x16] - out[5] == 9)
#s.add(out[7] << ((out[0x16] + ((out[0x16] >> 7) >> 5) & 7) - ((out[0x16] >> 7) >> 5) & 0x1f) == 0x17c)
s.add(out[0x16] == 0x3a)
s.add(out[0x10] == 0x73)
s.add(out[0x17] ^ 0x1d == out[0x12])
s.add(out[0xe] + out[0x17] == 0x59)
s.add(out[2] & out[5] == 0x30)
s.add(out[0xf] & 0x9f == 0x1f)
s.add(out[4] == 0x73)
s.add(out[0x17] ^ 0x4a == out[0])
s.add(out[6] ^ 0x3c == out[0xb])

while s.check() == sat:
    model = s.model()
    print("Found")
    res = ""
    for i in range(l):
        res += chr(model[out[i]].as_long())
    print(res)
    break
