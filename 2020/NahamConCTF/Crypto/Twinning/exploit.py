#!/usr/bin/env python3

from pwn import *
import gmpy2
import math

def facto(n):
    assert n % 2 != 0
    a = gmpy2.isqrt(n)
    b2 = gmpy2.square(a) - n
    while not gmpy2.is_square(b2):
        a += 1
        b2 = gmpy2.square(a) - n
    p = a + gmpy2.isqrt(b2)
    q = a - gmpy2.isqrt(b2)
    return int(p), int(q)

def getModInverse(a, m):
    if math.gcd(a, m) != 1:
        return None
    u1, u2, u3 = 1, 0, a
    v1, v2, v3 = 0, 1, m
    while v3 != 0:
        q = u3 // v3
        v1, v2, v3, u1, u2, u3 = (
            u1 - q * v1), (u2 - q * v2), (u3 - q * v3), v1, v2, v3
    return u1 % m

host = "jh2i.com"
port = 50013

r = remote(host, port)
print(r.recvuntil("is: ").decode())
e_n = r.recvuntil(")").decode()[1:-1].split(",")

e = int(e_n[0])
n = int(e_n[1])
print("e = {}, n = {}".format(e, n))
(p, q) = facto(n)
print("p = {}, q = {}".format(p, q))

print(r.recvuntil("is ").decode())
ct = r.recvuntil("W").decode()
ct = int(ct[:-2])
print(ct)

phi = (p - 1) * (q - 1)
d = getModInverse(e, phi)
pt = pow(ct, d, n)

print(r.recv())
r.send(str(pt))
print(r.recv())
